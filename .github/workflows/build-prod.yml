on:
  pull_request_target:
    types:
      - closed
    branches:
      - 'master'
    
env:
  AWS_Region: ap-south-1


jobs:

  deploy:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Sets env vars for Prod
      run: |
          echo "Container_Registry_NAME=887417737466.dkr.ecr.ap-south-1.amazonaws.com/wee-api-prod" >> $GITHUB_ENV
          echo "AWS_Account=887417737466" >> $GITHUB_ENV
          echo "Region=ap-south-1"  >> $GITHUB_ENV
          echo "ClusterName=Production-EKS-Onecode" >> $GITHUB_ENV
          echo "NameSpace=production" >> $GITHUB_ENV
          echo "ValuesFile=values.production.yaml" >> $GITHUB_ENV
          echo "AppName=wee-api" >> $GITHUB_ENV
     
         
    -   name: Configure AWS Credentials for Prod
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "${{ env.Region }}"

           
    - name: Checkout
      uses: actions/checkout@v3
    
      
    - name: Set up Java env
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'adopt'

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
         gradle-version: 8.1.1
         
    - name: Execute Gradle wrapper
      run: gradle wrapper
      
    - name: Execute Gradle build
      run: ./gradlew build
      
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: ${{ env.Container_Registry_NAME }}
        
          
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: ./
          # Dockerfile file location
        file: ./Dockerfile
          # Supported image architectures, since I need an aarch64 image, so I added arm64 here
        platforms: linux/arm64
        push: true
        tags: ${{ env.Container_Registry_NAME }}:latest
        
    - name: Create kube config
      run: |
              aws eks update-kubeconfig --region "${{ env.Region }}" --name "${{ env.ClusterName }}"
              
      
    - name: Helm Deploy
      run: |
             aws eks update-kubeconfig --region "${{ env.Region }}" --name "${{ env.ClusterName }}"
             helm upgrade --install "${{ env.AppName }}" ./deployment-files/helm/  -f ./deployment-files/helm/"${{ env.ValuesFile }}" -n "${{ env.NameSpace }}" --set image.repository=${{ env.Container_Registry_NAME }} --set region="${{ env.Region }}" --debug 
             
             rm ~/.kube/config
           
    - name: Slack Notification
      uses: rtCamp/action-slack-notify@v2
      if: always()
      env:
        SLACK_CHANNEL: '#gitactions-prod'
        SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
        SLACK_MESSAGE:  "${{ env.AppName }} is ${{ job.status }}"
        SLACK_TITLE: 'Build Status'
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL_PROD }}
